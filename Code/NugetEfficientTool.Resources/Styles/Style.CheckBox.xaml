<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:resources="clr-namespace:NugetEfficientTool.Resources"
                    xmlns:utils="clr-namespace:NugetEfficientTool.Utils;assembly=NugetEfficientTool.Utils">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Colors/Shared.xaml"/>
        <ResourceDictionary Source="../Images/Image.All.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="CheckBoxBaseStyle" TargetType="CheckBox">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#555" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>
    <system:Double x:Key="CheckBoxSize">16</system:Double>
    <resources:MultiBooleanToVisibilityConverter x:Key="MultiBooleanToVisibilityConverter"/>

    <Style x:Key="Style.DefaultCheckBox" TargetType="CheckBox" BasedOn="{StaticResource CheckBoxBaseStyle}">
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.BorderBrush.Lighter}"/>
        <Setter Property="utils:ControlHelper.ForegroundNormal" Value="{StaticResource Brush.Text.Normal}"></Setter>
        <Setter Property="utils:ControlHelper.ForegroundHover" Value="{StaticResource Brush.Text.Light}"></Setter>
        <Setter Property="utils:ControlHelper.ForegroundPressed" Value="{StaticResource Brush.Text.Dark}"></Setter>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" x:Name="LeftCol" />
                            <ColumnDefinition Width="*" x:Name="RightCol" />
                        </Grid.ColumnDefinitions>

                        <Border x:Name="NormalBorder" Grid.Column="0" Width="15" Height="15"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    CornerRadius="2"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}">
                            <Path x:Name="checkBox" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None" Opacity="0"
                                            Data="M7,1 L6,1 6,2 5,2 5,3 4,3 4,4 3,4 3,4.5 3,4 2,4 2,3 0,3 0,5 1,5 1,6 2,6 2,7 4,7 4,6 5,6 5,5 6,5 6,4 7,4 7,3 8,3 8,2 9,2 9,0 7,0 7,1 Z"
                                            Fill="{DynamicResource Brush.Accent.Normal}" />
                        </Border>
                        <Border x:Name="UncheckBorder" Grid.Column="0"
                                Width="{Binding ElementName=NormalBorder,Path=Width}" 
                                Height="{Binding ElementName=NormalBorder,Path=Height}"
                                CornerRadius="{Binding ElementName=NormalBorder,Path=CornerRadius}" 
                                BorderThickness="{Binding ElementName=NormalBorder,Path=BorderThickness}" SnapsToDevicePixels="True"
                                BorderBrush="{StaticResource Brush.BorderBrush.Close.Light}">
                            <Border.Visibility>
                                <MultiBinding Converter="{StaticResource MultiBooleanToVisibilityConverter}">
                                    <Binding Path="(utils:ControlHelper.HasUncheckedHint)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    <Binding Path="IsChecked" RelativeSource="{RelativeSource TemplatedParent}" Converter="{x:Static resources:BooleanToBoolean.ReverseBoolean}"/>
                                </MultiBinding>
                            </Border.Visibility>
                        </Border>
                        <TextBlock Grid.Column="1" x:Name="ContentTextBlock"
                                   Text="{TemplateBinding Content}"
                                   Foreground="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(utils:ControlHelper.ForegroundNormal)}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   Margin="{TemplateBinding Padding}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"></TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsStylusOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#F4F4F4" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentTextBlock" Property="Foreground" 
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(utils:ControlHelper.ForegroundHover)}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ContentTextBlock" Property="Foreground" 
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(utils:ControlHelper.ForegroundPressed)}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkBox" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.33"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>